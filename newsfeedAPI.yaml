openapi: 3.0.3
info:
  title: Newsfeed API
  version: 1.0.0
  description: API for News Posts (Create, Read, Update, Delete) and Version History.
servers:
  - url: http://localhost:8080
tags:
  - name: Newsfeed
    description: Newspost Operations

paths:
  /newsfeed:
    post:
      tags: [Newsfeed]
      summary: Create Newspost
      description: Creates a new news post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPostCreate'
      responses:
        '201':
          description: News post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsPostRead'
    get:
      tags: [Newsfeed]
      summary: Read Newspost (List)
      description: Reads a paginated list of news posts, optionally filtered by search term and/or date.
      parameters:
        - in: query
          name: query
          description: Optional search term to find in title and summary.
          required: false
          schema:
            type: string
          example: "Test"
        - in: query
          name: from
          description: Optional start date to get posts from this point in time.
          required: false
          schema:
            type: string
            format: date-time
          example: "2025-09-13T00:00:00Z"
        - in: query
          name: to
          description: Optional end date to get posts up to this point in time.
          required: false
          schema:
            type: string
            format: date-time
          example: "2025-09-18T23:59:59Z"
        - in: query
          name: page
          description: The page number to retrieve (starting at 0).
          required: true
          schema:
            type: integer
            minimum: 0
          example: 1
        - in: query
          name: pageSize
          description: The number of entries per page.
          required: true
          schema:
            type: integer
            minimum: 1
          example: 10
      responses:
        '200':
          description: List of news posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsPostRead'

  /newsfeed/{id}:
    put:
      tags: [Newsfeed]
      summary: Update Newspost
      description: Updates an existing news post by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPostUpdate'
      responses:
        '200':
          description: News post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsPostRead'
    delete:
      tags: [Newsfeed]
      summary: Delete Newspost
      description: Deletes (or marks as deleted) a news post by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: News post deleted (no content)

  /newsfeed/{id}/history:
    get:
      tags: [Newsfeed]
      summary: History Newspost
      description: Returns the version history of a news post.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsPostRevision'

components:
  schemas:
    NewsPostCreate:
      type: object
      required: [title, content, author]
      properties:
        id: { type: string }
        title: { type: string }
        content:
          $ref: '#/components/schemas/Content'
        author:
          $ref: '#/components/schemas/Author'
        creationDate:
          type: string
          format: date-time
        permissions:
          $ref: '#/components/schemas/PermissionsList'

    # Optional: „Partial Update“ ohne Requireds
    NewsPostUpdate:
      type: object
      properties:
        title: { type: string }
        content:
          $ref: '#/components/schemas/Content'
        author:
          $ref: '#/components/schemas/Author'
        creationDate:
          type: string
          format: date-time
        permissions:
          $ref: '#/components/schemas/PermissionsList'
      description: All fields optional; use for full or partial updates.

    NewsPostRead:
      type: object
      required: [id, title, content, author, creationDate]
      properties:
        id: { type: string }
        title: { type: string }
        content:
          $ref: '#/components/schemas/Content'
        author:
          $ref: '#/components/schemas/Author'
        creationDate:
          type: string
          format: date-time

    NewsPostRevision:
      type: object
      required: [revisionNumber, revisionTimestamp, revisionType, newsPostState]
      properties:
        revisionNumber:
          type: integer
          description: The unique ID of the revision.
          example: 2
        revisionTimestamp:
          type: string
          format: date-time
          description: The timestamp when this revision was created.
          example: "2025-09-20T14:30:00Z"
        revisionType:
          type: string
          description: The type of change (ADD, MOD, DEL for create, modify, delete).
          enum: [ADD, MOD, DEL]
          example: "MOD"
        newsPostState:
          description: The complete state of the news post at this revision.
          $ref: '#/components/schemas/NewsPostRead'

    Content:
      type: object
      required: [format, body]
      properties:
        format:
          type: string
          enum: [html]
        body:
          type: string

    Author:
      type: object
      required: [user_id, name]
      properties:
        user_id: { type: string }
        name: { type: string }

    PermissionsList:
      type: array
      description: A list of roles or permission strings assigned to the object.
      items:
        type: string
      example:
        - "F2.Team-5.Read.NewsPost.<Fachbereich|Dozierende|Studierende>"
        - "F2.Team-5.Write.NewsPost.Admin"
