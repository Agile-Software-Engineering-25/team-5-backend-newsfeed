openapi: 3.0.3
info:
  title: Newsfeed API
  version: 1.0.0
  description: API f√ºr News-Posts (Erstellen, Lesen, Aktualisieren, L√∂schen) und Versions-Historie.
servers:
  - url: /
tags:
  - name: Newsfeed
    description: Newspost-Operationen

paths:
  /newsfeed:
    post:
      tags: [Newsfeed]
      summary: Create Newspost
      description: Erstellt einen neuen Newspost.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPostCreate'
      responses:
        '200':
          description: Newspost erstellt
    get:
      tags: [Newsfeed]
      summary: Read Newspost (Liste)
      description: Liest eine paginierte Liste von Newsposts, optional gefiltert nach Suchbegriff und/oder Datum.
      parameters:
        - in: query
          name: query
          description: Optionaler Suchbegriff, der in Titel und Zusammenfassung gesucht wird.
          required: false
          schema:
            type: string
          example: "Test"
        - in: query
          name: from
          description: Optionales Startdatum, um nur Posts ab diesem Zeitpunkt zu erhalten.
          required: false
          schema:
            type: string
            format: date-time
          example: "2025-09-13"
        - in: query
          name: to
          description: Optionales Enddatum, um nur Posts bis zu diesem Zeitpunkt zu erhalten.
          required: false
          schema:
            type: string
            format: date-time
          example: "2025-09-18"
        - in: query
          name: page
          description: Die abzurufende Seitenzahl (beginnend bei 0).
          required: true
          schema:
            type: integer
            minimum: 0
          example: 1
        - in: query
          name: pageSize
          description: Die Anzahl der Eintr√§ge pro Seite.
          required: true
          schema:
            type: integer
            minimum: 1
          example: 10

      responses:   # üëà hier eine Stufe einger√ºckt wie "parameters"
        '200':
          description: Liste von Newsposts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsPostRead'



  /newsfeed/{id}:
    put:
      tags: [Newsfeed]
      summary: Update Newspost
      description: Aktualisiert einen bestehenden Newspost per ID.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPostUpdate'
      responses:
        '200':
          description: Newspost aktualisiert
    delete:
      tags: [Newsfeed]
      summary: Delete Newspost
      description: L√∂scht (oder markiert als gel√∂scht) einen Newspost per ID.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Newspost gel√∂scht

  /newsfeed/{id}/history:
    get:
      tags: [Newsfeed]
      summary: History Newspost
      description: Gibt die Versionshistorie eines Newsposts zur√ºck.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Versionsliste
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsPostHistoryItem'

components:
  schemas:
    NewsPostCreate:
      type: object
      required: [id, title, summary, status, content, author, creation_date]
      properties:
        id:
          type: string
        title:
          type: string
        summary:
          type: string
        status:
          type: string
          enum: [draft, published, archived, deleted]
        content:
          $ref: '#/components/schemas/Content'
        featured_image:
          $ref: '#/components/schemas/FeaturedImage'
        author:
          $ref: '#/components/schemas/Author'
        creation_date:
          type: string
          format: date-time
        publish_date:
          type: string
          format: date-time
          nullable: true
        last_modified:
          type: string
          format: date-time
          nullable: true
        expiration:
          $ref: '#/components/schemas/Expiration'
        permissions:
          $ref: '#/components/schemas/PermissionsRWX'
        settings:
          $ref: '#/components/schemas/Settings'

    NewsPostUpdate:
      allOf:
        - $ref: '#/components/schemas/NewsPostCreate'
      description: Gleich wie Create-Struktur f√ºr Updates.

    NewsPostRead:
      type: object
      required: [id, version, title, summary, status, content, author, creation_date]
      properties:
        id: { type: string }
        version: { type: integer }
        title: { type: string }
        summary: { type: string }
        status:
          type: string
          enum: [draft, published, archived, deleted]
        content:
          $ref: '#/components/schemas/Content'
        featured_image:
          $ref: '#/components/schemas/FeaturedImage'
        author:
          $ref: '#/components/schemas/Author'
        creation_date:
          type: string
          format: date-time
        publish_date:
          type: string
          format: date-time
          nullable: true
        last_modified:
          type: string
          format: date-time
          nullable: true
        permissions:
          $ref: '#/components/schemas/PermissionsFlags'
        settings:
          $ref: '#/components/schemas/Settings'

    NewsPostHistoryItem:
      type: object
      required: [id, version, title, summary, status, content, author, creation_date]
      properties:
        id: { type: string }
        version: { type: integer }
        title: { type: string }
        slug: { type: string }
        summary: { type: string }
        status:
          type: string
          enum: [draft, published, archived, deleted]
        content:
          $ref: '#/components/schemas/Content'
        featured_image:
          $ref: '#/components/schemas/FeaturedImage'
        author:
          $ref: '#/components/schemas/Author'
        creation_date:
          type: string
          format: date-time
        publish_date:
          type: string
          format: date-time
          nullable: true
        last_modified:
          type: string
          format: date-time
          nullable: true
        permissions:
          $ref: '#/components/schemas/PermissionsFlags'
        settings:
          $ref: '#/components/schemas/Settings'

    Content:
      type: object
      required: [format, body]
      properties:
        format:
          type: string
          enum: [markdown, html]
        body:
          type: string

    FeaturedImage:
      type: object
      properties:
        url: { type: string, format: uri }
        alt_text: { type: string }
        caption: { type: string }

    Author:
      type: object
      required: [user_id, name]
      properties:
        user_id: { type: string }
        name: { type: string }
        avatar_url: { type: string, format: uri, nullable: true }

    Expiration:
      type: object
      properties:
        expires_at:
          type: string
          format: date-time
          nullable: true
        auto_archive:
          type: boolean
          nullable: true

    PrincipalRef:
      type: object
      required: [id, type, name]
      properties:
        id: { type: string }
        type:
          type: string
          enum: [user, group]
        name: { type: string }

    PermissionsRWX:
      type: object
      properties:
        read:
          type: array
          items: { $ref: '#/components/schemas/PrincipalRef' }
        write:
          type: array
          items: { $ref: '#/components/schemas/PrincipalRef' }
        delete:
          type: array
          items: { $ref: '#/components/schemas/PrincipalRef' }

    PermissionsFlags:
      type: object
      properties:
        update: { type: boolean }
        delete: { type: boolean }

    Settings:
      type: object
      properties:
        featured: { type: boolean }
        sticky: { type: boolean }
